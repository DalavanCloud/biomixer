/*******************************************************************************
 * Copyright 2012 David Rusk 
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *
 *    http://www.apache.org/licenses/LICENSE-2.0 
 *     
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.  
 *******************************************************************************/
package org.thechiselgroup.biomixer.client.visualization_component.graph.svg_widget;

import org.junit.Test;
import org.thechiselgroup.biomixer.client.core.geometry.Point;
import org.thechiselgroup.biomixer.client.core.ui.Colors;
import org.thechiselgroup.biomixer.client.visualization_component.graph.widget.Arc;
import org.thechiselgroup.biomixer.client.visualization_component.graph.widget.ArcSettings;
import org.thechiselgroup.biomixer.client.visualization_component.graph.widget.GraphDisplay;
import org.thechiselgroup.biomixer.client.visualization_component.graph.widget.Node;

/**
 * This class tests the SVG generated by the GraphSvgDisplay. Unit tests for
 * methods which do not result in SVG output are in GraphSvgDisplayProcessTest.
 * 
 * @author drusk
 * 
 */
public class GraphSvgDisplayOutputTest extends AbstractGraphSvgDisplayTest {

    @Test
    public void addNodePutsRectangleInSvg() {
        addNode(ID1, LABEL1, TYPE);
        assertSvgElementEqualsFile("addSingleNode", underTest.asSvg());
    }

    @Test
    public void addTwoNodesAddArcSetLocationShouldCauseArcToReposition() {
        addNode(ID1, LABEL1, TYPE);
        Node node2 = addNode(ID2, LABEL2, TYPE);
        addArc(ARC_ID1, ID1, ID2, TYPE, true);
        underTest.setLocation(node2, new Point(130, 0));
        assertSvgElementEqualsFile("twoNodesOneArc", underTest.asSvg());
    }

    @Test
    public void addTwoNodesAndSetNewLocation() {
        addNode(ID1, LABEL1, TYPE);
        Node node2 = addNode(ID2, LABEL2, TYPE);
        underTest.setLocation(node2, new Point(130, 0));
        assertSvgElementEqualsFile("addTwoNodesSetLocation", underTest.asSvg());
    }

    @Test
    public void addTwoNodesPutsRectanglesInSvg() {
        addNode(ID1, LABEL1, TYPE);
        addNode(ID2, LABEL2, TYPE);
        assertSvgElementEqualsFile("addTwoNodes", underTest.asSvg());
    }

    @Test
    public void addTwoNodesRemoveOne() {
        Node node1 = addNode(ID1, LABEL1, TYPE);
        addNode(ID2, LABEL2, TYPE);
        underTest.removeNode(node1);
        assertSvgElementEqualsFile("addTwoNodesRemoveOne", underTest.asSvg());
    }

    @Test
    public void addTwoNodesSetLocationAddArc() {
        addNode(ID1, LABEL1, TYPE);
        Node node2 = addNode(ID2, LABEL2, TYPE);
        underTest.setLocation(node2, new Point(130, 0));
        addArc(ARC_ID1, ID1, ID2, TYPE, true);
        assertSvgElementEqualsFile("twoNodesOneArc", underTest.asSvg());
    }

    private Arc addTwoSeparatedNodesWithArc() {
        addNode(ID1, LABEL1, TYPE);
        Node node2 = addNode(ID2, LABEL2, TYPE);
        underTest.setLocation(node2, new Point(130, 0));
        Arc arc = addArc(ARC_ID1, ID1, ID2, TYPE, true);
        return arc;
    }

    @Test
    public void animateToMovesOneNodeFinalDesinationShouldBeNewPoint() {
        Node node = addNode(ID1, LABEL1, TYPE);
        underTest.animateMoveTo(node, new Point(100, 100));
        assertSvgElementEqualsFile("animateMoveOneNode", underTest.asSvg());
    }

    @Test
    public void removeArcBetweenTwoNodes() {
        Arc arc = addTwoSeparatedNodesWithArc();
        underTest.removeArc(arc);
        assertSvgElementEqualsFile("addTwoNodesSetLocation", underTest.asSvg());
    }

    @Test
    public void removingNodeShouldRemoveArc() {
        Node node1 = addNode(ID1, LABEL1, TYPE);
        Node node2 = addNode(ID2, LABEL2, TYPE);
        addArc(ARC_ID1, ID1, ID2, TYPE, true);
        underTest.setLocation(node2, new Point(130, 0));
        underTest.removeNode(node1);
        assertSvgElementEqualsFile("addTwoNodesAddArcMoveNode2RemoveNode1",
                underTest.asSvg());
    }

    @Test
    public void setArcColor() {
        Arc arc = addTwoSeparatedNodesWithArc();
        underTest.setArcStyle(arc, ArcSettings.ARC_COLOR, "#AFC6E5");
        assertSvgElementEqualsFile("setArcColor", underTest.asSvg());
    }

    @Test
    public void setArcStyleDashed() {
        Arc arc = addTwoSeparatedNodesWithArc();
        underTest.setArcStyle(arc, ArcSettings.ARC_STYLE,
                ArcSettings.ARC_STYLE_DASHED);
        assertSvgElementEqualsFile("setArcStyleDashed", underTest.asSvg());
    }

    @Test
    public void setArcStyleDashedThenSolid() {
        Arc arc = addTwoSeparatedNodesWithArc();
        underTest.setArcStyle(arc, ArcSettings.ARC_STYLE,
                ArcSettings.ARC_STYLE_DASHED);
        underTest.setArcStyle(arc, ArcSettings.ARC_STYLE,
                ArcSettings.ARC_STYLE_SOLID);
        assertSvgElementEqualsFile("setArcStyleSolid", underTest.asSvg());
    }

    @Test
    public void setArcStyleSolid() {
        Arc arc = addTwoSeparatedNodesWithArc();
        underTest.setArcStyle(arc, ArcSettings.ARC_STYLE,
                ArcSettings.ARC_STYLE_SOLID);
        assertSvgElementEqualsFile("setArcStyleSolid", underTest.asSvg());
    }

    @Test
    public void setArcThickness() {
        Arc arc = addTwoSeparatedNodesWithArc();
        underTest.setArcStyle(arc, ArcSettings.ARC_THICKNESS, "3");
        assertSvgElementEqualsFile("setArcThickness", underTest.asSvg());
    }

    @Test
    public void setNodeBackgroundColor() {
        Node node = addNode(ID1, LABEL1, TYPE);
        underTest.setNodeStyle(node, GraphDisplay.NODE_BACKGROUND_COLOR,
                Colors.YELLOW_1);
        assertSvgElementEqualsFile("setNodeBackgroundColor", underTest.asSvg());
    }

    @Test
    public void setNodeBorderColor() {
        Node node = addNode(ID1, LABEL1, TYPE);
        underTest.setNodeStyle(node, GraphDisplay.NODE_BORDER_COLOR,
                Colors.YELLOW_2);
        assertSvgElementEqualsFile("setNodeBorderColor", underTest.asSvg());
    }

    @Test
    public void setNodeFontColor() {
        Node node = addNode(ID1, LABEL1, TYPE);
        underTest.setNodeStyle(node, GraphDisplay.NODE_FONT_COLOR,
                Colors.ORANGE);
        assertSvgElementEqualsFile("setNodeFontColor", underTest.asSvg());
    }

    @Test
    public void setNodeFontWeightBold() {
        Node node = addNode(ID1, LABEL1, TYPE);
        underTest.setNodeStyle(node, GraphDisplay.NODE_FONT_WEIGHT,
                GraphDisplay.NODE_FONT_WEIGHT_BOLD);
        assertSvgElementEqualsFile("setNodeFontWeightBold", underTest.asSvg());
    }

    @Test
    public void setNodeFontWeightBoldThenNormal() {
        Node node = addNode(ID1, LABEL1, TYPE);
        underTest.setNodeStyle(node, GraphDisplay.NODE_FONT_WEIGHT,
                GraphDisplay.NODE_FONT_WEIGHT_BOLD);
        underTest.setNodeStyle(node, GraphDisplay.NODE_FONT_WEIGHT,
                GraphDisplay.NODE_FONT_WEIGHT_NORMAL);
        assertSvgElementEqualsFile("setNodeFontWeightBoldThenNormal",
                underTest.asSvg());
    }
}
